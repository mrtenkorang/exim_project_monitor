import 'dart:convert';
import 'package:flutter/foundation.dart';
import 'package:google_maps_flutter/google_maps_flutter.dart' show LatLng;

/// Model class representing a farm entity
class Farm {
  final int? id; // Will be auto-generated by SQLite
  final String projectId;
  final String visitId;
  final String dateOfVisit;
  final String mainBuyers;
  /// JSON-encoded string representing the farm boundary polygon as a list of LatLng points
  /// Example: '[{"latitude":1.2345,"longitude":2.3456},...]'
  final String farmBoundaryPolygon;
  final String landUseClassification;
  final String accessibility;
  final String proximityToProcessingFacility;
  final String serviceProvider;
  final String cooperativesOrFarmerGroups;
  final String valueChainLinkages;
  final String officerName;
  final String officerId;
  final String observations;
  final String issuesIdentified;
  final String infrastructureIdentified;
  final String recommendedActions;
  final String followUpStatus;
  final String farmSize;
  final String location;
  final DateTime createdAt;
  final DateTime? updatedAt;
  final bool isSynced;

  Farm({
    this.id,
    required this.projectId,
    required this.visitId,
    required this.dateOfVisit,
    required this.mainBuyers,
    required this.farmBoundaryPolygon,
    required this.landUseClassification,
    required this.accessibility,
    required this.proximityToProcessingFacility,
    required this.serviceProvider,
    required this.cooperativesOrFarmerGroups,
    required this.valueChainLinkages,
    required this.officerName,
    required this.officerId,
    required this.observations,
    required this.issuesIdentified,
    required this.infrastructureIdentified,
    required this.recommendedActions,
    required this.followUpStatus,
    required this.farmSize,
    required this.location,
    required this.isSynced,
    DateTime? createdAt,
    this.updatedAt,
  }) : createdAt = createdAt ?? DateTime.now();

  /// Convert a Farm into a Map. The keys must correspond to the names of the
  /// Converts the farm to a map for JSON serialization
  Map<String, dynamic> toJson() => toMap();

  /// Convert a Farm into a Map. The keys must correspond to the names of the
  /// columns in the database.
  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'projectId': projectId,
      'visitId': visitId,
      'dateOfVisit': dateOfVisit,
      'mainBuyers': mainBuyers,
      'farmBoundaryPolygon': farmBoundaryPolygon,
      'landUseClassification': landUseClassification,
      'accessibility': accessibility,
      'proximityToFacility': proximityToProcessingFacility,
      'serviceProvider': serviceProvider,
      'cooperativesOrFarmerGroups': cooperativesOrFarmerGroups,
      'valueChainLinkages': valueChainLinkages,
      'officerName': officerName,
      'officerId': officerId,
      'observations': observations,
      'issuesIdentified': issuesIdentified,
      'infrastructureIdentified': infrastructureIdentified,
      'recommendedActions': recommendedActions,
      'followUpStatus': followUpStatus,
      'isSynced': isSynced ? 1 : 0,
      'farmSize': farmSize,
      'location': location,
      'createdAt': createdAt.toIso8601String(),
      'updatedAt': updatedAt?.toIso8601String(),
    };
  }

  /// Create a Farm from a Map
  factory Farm.fromMap(Map<String, dynamic> map) {
    // Handle potential null or empty polygon data
    String boundaryPolygon = map['farmBoundaryPolygon'] ?? '[]';
    
    return Farm(
      id: map['id'],
      projectId: map['projectId'] ?? '',
      visitId: map['visitId'] ?? '',
      dateOfVisit: map['dateOfVisit'] ?? '',
      mainBuyers: map['mainBuyers'] ?? '',
      farmBoundaryPolygon: boundaryPolygon,
      landUseClassification: map['landUseClassification'] ?? '',
      accessibility: map['accessibility'],
      proximityToProcessingFacility: map['proximityToFacility'],
      serviceProvider: map['serviceProvider'],
      cooperativesOrFarmerGroups: map['cooperativesOrFarmerGroups'],
      valueChainLinkages: map['valueChainLinkages'],
      officerName: map['officerName'],
      officerId: map['officerId'],
      observations: map['observations'],
      issuesIdentified: map['issuesIdentified'],
      infrastructureIdentified: map['infrastructureIdentified'],
      recommendedActions: map['recommendedActions'],
      followUpStatus: map['followUpStatus'],
      farmSize: map['farmSize'],
      location: map['location'],
      isSynced: map['isSynced'] == 1,
      createdAt: DateTime.parse(map['createdAt']),
      updatedAt: map['updatedAt'] != null ? DateTime.parse(map['updatedAt']) : null,
    );
  }

  /// Create a copy of the Farm with updated fields
  Farm copyWith({
    int? id,
    String? projectId,
    String? visitId,
    String? dateOfVisit,
    String? mainBuyers,
    String? farmBoundaryPolygon,
    String? landUseClassification,
    String? accessibility,
    String? proximityToProcessingFacility,
    String? serviceProvider,
    String? cooperativesOrFarmerGroups,
    String? valueChainLinkages,
    String? officerName,
    String? officerId,
    String? observations,
    String? issuesIdentified,
    String? infrastructureIdentified,
    String? recommendedActions,
    String? followUpStatus,
    String? farmSize,
    String? location,
    DateTime? updatedAt,
  }) {
    return Farm(
      id: id ?? this.id,
      projectId: projectId ?? this.projectId,
      visitId: visitId ?? this.visitId,
      dateOfVisit: dateOfVisit ?? this.dateOfVisit,
      mainBuyers: mainBuyers ?? this.mainBuyers,
      farmBoundaryPolygon: farmBoundaryPolygon ?? this.farmBoundaryPolygon,
      landUseClassification: landUseClassification ?? this.landUseClassification,
      accessibility: accessibility ?? this.accessibility,
      proximityToProcessingFacility: proximityToProcessingFacility ?? this.proximityToProcessingFacility,
      serviceProvider: serviceProvider ?? this.serviceProvider,
      cooperativesOrFarmerGroups: cooperativesOrFarmerGroups ?? this.cooperativesOrFarmerGroups,
      valueChainLinkages: valueChainLinkages ?? this.valueChainLinkages,
      officerName: officerName ?? this.officerName,
      officerId: officerId ?? this.officerId,
      observations: observations ?? this.observations,
      issuesIdentified: issuesIdentified ?? this.issuesIdentified,
      infrastructureIdentified: infrastructureIdentified ?? this.infrastructureIdentified,
      recommendedActions: recommendedActions ?? this.recommendedActions,
      followUpStatus: followUpStatus ?? this.followUpStatus,
      farmSize: farmSize ?? this.farmSize,
      location: location ?? this.location,
      createdAt: createdAt,
      isSynced: isSynced,
      updatedAt: updatedAt ?? DateTime.now(),
    );
  }

  @override
  String toString() {
    return 'Farm{id: $id, projectId: $projectId, visitId: $visitId, officerName: $officerName, isSynced: $isSynced}';
  }
}
